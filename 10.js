const input = ` 21373,  53216; -2, -5
-10460, -31621;  1,  3
 21353, -42222; -2,  4
 53136, -52828; -5,  5
 42542, -21012; -4,  2
-42304, -10407;  4,  1
 21337,  21407; -2, -2
-42297,  42612;  4, -4
 31921, -42227; -3,  4
-21087,  10800;  2, -1
-52877, -31621;  5,  3
 42532,  32006; -4, -3
 42557, -31617; -4,  3
-10454,  21405;  1, -2
 10708, -21016; -1,  2
-42316, -10407;  4,  1
 42559,  42609; -4, -4
 21338,  10797; -2, -1
 21371, -21016; -2,  2
 42572, -42222; -4,  4
 10728,  42616; -1, -4
-31686,  21404;  3, -2
 31937, -21021; -3,  2
 53180,  32013; -5, -3
 42523, -52830; -4,  5
 53172,  10795; -5, -1
 42539, -42223; -4,  4
-21105,  42609;  2, -4
-10468, -42222;  1,  4
 10756, -52831; -1,  5
-10473, -31625;  1,  3
 53189,  10794; -5, -1
 42548, -31623; -4,  3
-42308, -31623;  4,  3
-21046, -10408;  2,  1
 53152, -42222; -5,  4
 53153,  53217; -5, -5
-42272,  53216;  4, -5
-42277,  10798;  4, -1
 10756, -10411; -1,  1
 21333, -10414; -2,  1
-52894,  10796;  5, -1
 10759, -21021; -1,  2
 21353, -21014; -2,  2
 21365,  53214; -2, -5
-42269, -21020;  4,  2
 10750,  53219; -1, -5
 53152, -10416; -5,  1
-31651, -52827;  3,  5
 10734, -42226; -1,  4
 21324, -31622; -2,  3
 31918, -31618; -3,  3
 53157, -21012; -5,  2
-52871,  32013;  5, -3
 31954, -21020; -3,  2
 31967,  10798; -3, -1
-52866, -42230;  5,  4
-21072, -52827;  2,  5
-21087, -21013;  2,  2
 10720, -21014; -1,  2
 31927,  42611; -3, -4
 21349,  10801; -2, -1
-21078,  21407;  2, -2
-42261, -31626;  4,  3
 21366,  32013; -2, -3
-31661,  53214;  3, -5
-31687,  21401;  3, -2
-52882, -21019;  5,  2
-21078,  32005;  2, -3
 31930, -52833; -3,  5
-31707, -10414;  3,  1
 31947, -10416; -3,  1
-31707, -31625;  3,  3
 31961, -42226; -3,  4
-42293, -52828;  4,  5
-42291, -52832;  4,  5
 31963,  10799; -3, -1
 21326, -52827; -2,  5
-31702, -31622;  3,  3
-42304, -52828;  4,  5
-52909, -31626;  5,  3
-10466,  10799;  1, -1
-52902, -31621;  5,  3
-31652,  10797;  3, -1
 21348, -31617; -2,  3
-52905, -21012;  5,  2
-31670,  10794;  3, -1
 21342, -10408; -2,  1
-42301,  10801;  4, -1
 21325,  21405; -2, -2
-31656,  53214;  3, -5
 10710, -52832; -1,  5
 42539, -10409; -4,  1
-10454, -31619;  1,  3
 53133,  42612; -5, -4
-21047,  42612;  2, -4
 21365, -21012; -2,  2
 53136, -10415; -5,  1
-10493, -31623;  1,  3
-21062,  53217;  2, -5
-31653,  21403;  3, -2
 53188, -52830; -5,  5
-21096, -31621;  2,  3
 10713, -21015; -1,  2
 31919,  32013; -3, -3
-10457, -52834;  1,  5
 10749,  32005; -1, -3
-31704, -21013;  3,  2
 10756,  42611; -1, -4
-10477, -10410;  1,  1
-21089, -31617;  2,  3
 53136,  42610; -5, -4
-31659,  10803;  3, -1
 21350,  42609; -2, -4
 42552, -31626; -4,  3
-31691, -52836;  3,  5
 53172, -52831; -5,  5
 21361,  21406; -2, -2
-52902,  42609;  5, -4
-42267,  32013;  4, -3
-31677, -31626;  3,  3
-10443, -10411;  1,  1
 10724, -10408; -1,  1
 31927, -31620; -3,  3
-52914, -10407;  5,  1
-52870,  53214;  5, -5
-31692, -31623;  3,  3
 42573, -10412; -4,  1
 21349,  42609; -2, -4
 10717, -31619; -1,  3
-10494,  21408;  1, -2
 42528, -31619; -4,  3
-21096,  32009;  2, -3
-31651,  53223;  3, -5
-21087, -21019;  2,  2
-10474, -21019;  1,  2
 53184, -21021; -5,  2
 10750, -21016; -1,  2
-42261, -31618;  4,  3
-10474,  10801;  1, -1
-52873, -42227;  5,  4
-42281,  10797;  4, -1
-31712, -31626;  3,  3
 42566,  21399; -4, -2
 42564,  53219; -4, -5
-10474, -52829;  1,  5
 53155,  32009; -5, -3
-10482,  42616;  1, -4
-21063,  21404;  2, -2
 53176,  32008; -5, -3
-52919, -52836;  5,  5
-10477, -52830;  1,  5
 31958, -52829; -3,  5
 21349, -21017; -2,  2
-31664,  32013;  3, -3
-52886, -21013;  5,  2
-10466, -31622;  1,  3
-21062,  32013;  2, -3
 53129,  10803; -5, -1
 21340,  32008; -2, -3
-21082,  10800;  2, -1
-52918,  21408;  5, -2
-52894,  53220;  5, -5
-21075, -21013;  2,  2
 53129,  42609; -5, -4
 31918,  53214; -3, -5
-31676, -10415;  3,  1
 42567, -10415; -4,  1
 53180, -10412; -5,  1
-10446,  53215;  1, -5
-52873, -21021;  5,  2
-42281, -10411;  4,  1
 42523,  21402; -4, -2
-21064, -21021;  2,  2
 31963,  21401; -3, -2
-31664, -42230;  3,  4
-52914, -42231;  5,  4
-10497, -21014;  1,  2
-21087,  42610;  2, -4
 42523, -52835; -4,  5
 31958,  32007; -3, -3
-52862,  10796;  5, -1
-31662,  53214;  3, -5
 10748, -10411; -1,  1
-31707, -21016;  3,  2
-52922, -10416;  5,  1
 31918,  21408; -3, -2
-31667, -31618;  3,  3
-42291,  32009;  4, -3
 31922,  42609; -3, -4
 10732,  42610; -1, -4
 21316,  53223; -2, -5
 10748, -31620; -1,  3
 31976, -42226; -3,  4
-52880, -42231;  5,  4
-21071, -42223;  2,  4
 10761, -31626; -1,  3
 21313, -52830; -2,  5
-52914,  53222;  5, -5
-52861,  42610;  5, -4
-21104, -31626;  2,  3
-21102,  10801;  2, -1
 42580, -42224; -4,  4
 10720, -31624; -1,  3
-10454, -42223;  1,  4
-10462, -21012;  1,  2
-52922, -31624;  5,  3
 31958,  53222; -3, -5
-42283, -42222;  4,  4
 10718, -21017; -1,  2
 10721, -21020; -1,  2
-31700,  42611;  3, -4
 21362,  10798; -2, -1
-10502, -52830;  1,  5
 31977,  10799; -3, -1
 21369,  32005; -2, -3
 42559,  10801; -4, -1
 21349, -42224; -2,  4
-21047, -42229;  2,  4
 21313, -31619; -2,  3
-21089, -31617;  2,  3
 53184, -10408; -5,  1
 31946,  10797; -3, -1
 21345, -10408; -2,  1
-52877,  53223;  5, -5
-52865, -52834;  5,  5
-52922,  21400;  5, -2
 10724, -31619; -1,  3
-10459, -31621;  1,  3
 31967,  53214; -3, -5
-10466,  42614;  1, -4
-21058, -31626;  2,  3
 10708, -42226; -1,  4
 21313, -42224; -2,  4
-21099, -10416;  2,  1
 10741,  32013; -1, -3
-21062, -52829;  2,  5
 31938, -52832; -3,  5
 21318,  10802; -2, -1
 21349,  21402; -2, -2
 21361,  53223; -2, -5
 21349,  21405; -2, -2
 21334,  10794; -2, -1
 31947,  21399; -3, -2
 10709, -10412; -1,  1
-42269, -10412;  4,  1
-52874, -42227;  5,  4
-21095, -31620;  2,  3
-10457,  21404;  1, -2
 53157, -21020; -5,  2
-31685, -21016;  3,  2
 10716, -31626; -1,  3
 53152,  10802; -5, -1
-52922,  42611;  5, -4
 21361,  42612; -2, -4
 31966,  10795; -3, -1
-21102,  42610;  2, -4
 42580,  32010; -4, -3
 31947, -21013; -3,  2
 42571,  42612; -4, -4
-52862,  53221;  5, -5
 53171, -10411; -5,  1
 42555,  32011; -4, -3
-52909, -42231;  5,  4
 31934, -10408; -3,  1
-42268, -52827;  4,  5
-21056,  53218;  2, -5
-42259, -52832;  4,  5
 31976,  21404; -3, -2
 42532,  53216; -4, -5
-52920, -42231;  5,  4
 53179,  53214; -5, -5
-52869,  10794;  5, -1
 53181,  42618; -5, -4
 10760, -52832; -1,  5
 31975, -52829; -3,  5
 42523, -42222; -4,  4
-31656,  32013;  3, -3
-42260, -52830;  4,  5
 42556, -31617; -4,  3
 31979, -10407; -3,  1
 42575,  32013; -4, -3
 10728,  21407; -1, -2
-10458,  32009;  1, -3
 42563, -31619; -4,  3
 31942, -52827; -3,  5
 21372,  32009; -2, -3
 53139,  32008; -5, -3
-42281, -42228;  4,  4
-42315, -52827;  4,  5
 31946,  21405; -3, -2
 42559, -31622; -4,  3
-10442, -10410;  1,  1
-52910, -21015;  5,  2
-52921, -42227;  5,  4
 31943, -10409; -3,  1
 10769, -10416; -1,  1
-42305,  42611;  4, -4
 21337,  32013; -2, -3
 10728, -42228; -1,  4
-31653,  21403;  3, -2
 21317,  32008; -2, -3
-31679,  10803;  3, -1
-31664,  10799;  3, -1
-52862,  42616;  5, -4
 31918,  53218; -3, -5
-21104,  32004;  2, -3
-42297,  10796;  4, -1
 31938,  53222; -3, -5
-31655, -31623;  3,  3
-21071, -42229;  2,  4
 53173, -52832; -5,  5
 31929, -31621; -3,  3
-42289,  21402;  4, -2
 42533,  10799; -4, -1
-21102, -52828;  2,  5
-21062, -42225;  2,  4
 53133, -21016; -5,  2
 31969,  53223; -3, -5
-10482, -21021;  1,  2
 21355,  32004; -2, -3
-31664,  21402;  3, -2
-31664, -31626;  3,  3
 10760, -42231; -1,  4
-31684, -31623;  3,  3
-52902, -21015;  5,  2
 42536,  32004; -4, -3
-10442,  32007;  1, -3`
  .split("\n")
  .map((line) => {
    return line.split(";").map((item, index) => {
      return item.split(",").map((item, index) => {
        return parseInt(item, 10);
      });
    });
  });

console.log(input.slice(0, 3));

// Nice, part two is just counting times until the letters are readable
function partOne() {
  let m = {};
  let i = 0;
  for (const [pos, vel] of input) {
    m[i] = { pos, vel };
    i++;
  }

  let times = 0;

  while (true) {
    times++;
    const newMap = {};
    Object.keys(m).forEach((k) => {
      const { pos, vel } = m[k];
      const newPos = [pos[0] + vel[0], pos[1] + vel[1]];
      newMap[k] = { pos: newPos, vel };
    });

    const minY = Math.min(...Object.values(newMap).map((item) => item.pos[1]));
    const maxY = Math.max(...Object.values(newMap).map((item) => item.pos[1]));

    // If they are all within 10 y units of each other, assume they are readable
    if (maxY - minY < 10) {
      const minX = Math.min(
        ...Object.values(newMap).map((item) => item.pos[0])
      );
      const maxX = Math.max(
        ...Object.values(newMap).map((item) => item.pos[0])
      );

      console.log("Found it!", times, minX, maxX);

      // BXJXJAEX -- nice!
      for (let y = minY; y <= maxY; y++) {
        let row = "";
        for (let x = minX; x <= maxX; x++) {
          let found = false;
          for (const { pos } of Object.values(newMap)) {
            if (pos[0] === x && pos[1] === y) {
              found = true;
              break;
            }
          }
          row += found ? "#" : ".";
        }
        console.log(row);
      }
      break;
    }

    m = newMap;
  }

  return m;
}

// console.log(partOne());

partOne();
